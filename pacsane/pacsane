#!/usr/bin/perl
#
# pacsane -- check pacman database for consistency
#
# This file is part of pacsane
# (C) 2012-2015 Indie Computing Corp.
#
# pacsane is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pacsane is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pacsane.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

use File::Temp;
use Getopt::Long;
use UBOS::Host;
use UBOS::Logging;

my $essential;
my $obsoleteOnly;
my $help;
my $verbose;
my $exit = 0;

GetOptions( 'essential'     => \$essential,
            'obsolete-only' => \$obsoleteOnly,
            'help'          => \$help,
            'verbose+'      => \$verbose );

if( $help ) {
    synopsisHelpQuit();
}
if( $essential && $obsoleteOnly ) {
    synopsisHelpQuit();
}
unless( @ARGV ) {
    synopsisHelpQuit();
}
my @dbFiles = @ARGV;

UBOS::Logging::initialize( 'pacsane', undef, $verbose, undef );

my $tmpDir = UBOS::Host::vars()->get( 'host.tmpdir', '/tmp' );

my %compareFields = (
    'pkgname'   => 'NAME',
    'pkgver'    => 'VERSION',
    'filesize'  => 'CSIZE',
    'size'      => 'ISIZE',
    'arch'      => 'ARCH' );

unless( $essential ) {
    %compareFields = (
        %compareFields,
        'url'       => 'URL',
        'builddate' => 'BUILDDATE'
        # 'license'   => 'LICENSE' # There seem to be a bunch of mismatches, e.g. dual-licensed
        # as GPL and custom in one place, and only GPL in another. FIXME. Needs investigation.
    );
}

foreach my $dbFile ( @dbFiles ) {
    if( $obsoleteOnly ) {
        info( '# Package db file:', $dbFile );
    } else {
        info( 'Package db file:', $dbFile );
    }

    unless( -r $dbFile ) {
        fatal( 'Cannot read file:', $dbFile );
    }

    my $unpackedDbDir = File::Temp->newdir( UNLINK => 1, DIR => $tmpDir );
    if( _unpackTar( $unpackedDbDir, $dbFile, '--warning=no-unknown-keyword' )) {
        fatal( 'Cannot unpack. Is this a package db file?', $dbFile );
    }

    my @dbFileDirs = ();
    unless( opendir( DIR, $unpackedDbDir )) {
        error( $! );
    }
    while( my $file = readdir( DIR )) {
        if( $file ne '.' && $file ne '..' ) {
            if( -d "$unpackedDbDir/$file" && -e "$unpackedDbDir/$file/desc" ) {
                push @dbFileDirs, "$unpackedDbDir/$file";
            }
        }
    }
    closedir( DIR );

    my $definedPackages = {};
    foreach my $dbFileDir ( @dbFileDirs ) {
        trace( 'dbFileDir:', $dbFileDir );

        my $packageName = $dbFileDir;
        $packageName =~ s!^.*/!!; # greedy
        my $content = UBOS::Utils::slurpFile( "$dbFileDir/desc" );

        my $packageData = {};
        my $key;
        foreach my $line ( split /\n/, $content ) {
            if( $key ) {
                if( $line ) {
                    if( $packageData->{$key} ) {
                        $packageData->{$key} .= "\n$line";
                    } else {
                        $packageData->{$key} = $line;
                    }

                } else {
                    $key = undef;
                }
            } elsif( $line =~ m!^%(.+)%$! ) {
                $key = $1;
            }
        }
        $definedPackages->{$packageName} = $packageData;
    }
    $unpackedDbDir = undef; # delete when going out of scope

    # Now let's see what we have in the same directory.
    my $dir;
    if( $dbFile =~ m!^(.*/)[^/]+$! ) {
        $dir = $1;
    } else {
        $dir = '';
    } # can't have trailing /, we wouldn't have been able to read file earlier

    my @packageFiles = grep { ! m!\.sig$! } <$dir*.pkg.*>;
    my $foundPackages = {};
    foreach my $packageFile ( @packageFiles ) {
        trace( 'packageFile:', $packageFile );

        my $shortPackageFile = $packageFile;
        if( $dir ) {
            $shortPackageFile =~ s!^$dir!!;
        }
        my $packagePlusVersion = $shortPackageFile;
        $packagePlusVersion =~ s!-[a-z0-9_]+\.pkg\..*!!;

        my $packageTarDir = File::Temp->newdir( UNLINK => 1, DIR => $tmpDir );
        if( _unpackTar( $packageTarDir, $packageFile, '.PKGINFO --warning=no-unknown-keyword' )) {
            fatal( 'Cannot unpack. Is this a package file?', $packageFile );
        }

        my $pkgInfo = {
            'filename' => $shortPackageFile,
            'filesize' => ( -s $packageFile )
        }; # keep some other data while we are at it

        my $content = UBOS::Utils::slurpFile( "$packageTarDir/.PKGINFO" );
        foreach my $line ( split /\n/, $content ) {
            if( $line =~ m!(\S+)\s*=\s*(\S*)! ) {
                my ( $key, $value ) = ( $1, $2 );
                $pkgInfo->{$key} = $value;
            }
        }
        $foundPackages->{$packagePlusVersion} = $pkgInfo;
    }

    info( 'Packages mentioned in package database:', $definedPackages );
    info( 'Packages actually found in filesystem:', $foundPackages );

    # Now let's do some matching. First: make sure all package files exist that are referenced in
    # the package database, and are consistent
    unless( $obsoleteOnly ) {
        foreach my $definedPackageNameVersion ( keys %$definedPackages ) {
            my $definedPackageInfo = $definedPackages->{$definedPackageNameVersion};
            trace( 'Package files exist with versions:', $definedPackageNameVersion, $definedPackageInfo );

            my $foundPackageInfo = $foundPackages->{$definedPackageNameVersion};
            if( $foundPackageInfo ) {
                compareFoundDefined( $definedPackageNameVersion, $foundPackageInfo, $definedPackageInfo );
            } else {
                error( 'Package', $definedPackageNameVersion, 'is listed in package database, but package file does not exist. Repository broken.' );
            }
        }
    }

    # Now find package files that aren't in the database
    my $notInDb = {};
    foreach my $foundPackageNameVersion ( keys %$foundPackages ) {
        my $foundPackageInfo = $foundPackages->{$foundPackageNameVersion};
        trace( 'Package files that do not exist:', $foundPackageNameVersion, $foundPackageInfo );

        unless( $definedPackages->{$foundPackageNameVersion} ) {
            # let's also report on alternate versions found of the same package
            if( $foundPackageNameVersion =~ m!^(.*)(-\d+:)?-([^-]+)-(\d+(\.\d+)?)$! ) {
                my $packageName = $1;
                unless( defined( $notInDb->{$packageName} )) {
                    $notInDb->{$packageName} = [];
                }
                push @{$notInDb->{$packageName}}, $foundPackageNameVersion;

            } elsif( !$obsoleteOnly ) {
                error( 'Failed to parse package name/version:', $foundPackageNameVersion );
            }

        } elsif( $verbose ) {
            if( $obsoleteOnly ) {
                info( '# Package', $foundPackageNameVersion, 'found as expected' );
            } else {
                info( 'Package', $foundPackageNameVersion, 'found as expected' );
            }
        }
    }

    foreach my $notInDbName ( keys %$notInDb ) {
        my $notInDbPackageVersions = $notInDb->{$notInDbName};

        foreach my $notInDbPackageVersion ( @$notInDbPackageVersions ) {
            my @infoMsg;
            if( $obsoleteOnly ) {
                print $notInDbPackageVersion;
            } else {
                push @infoMsg, 'Package', $notInDbPackageVersion, 'not referenced, but alternate version in database:';
            }

            foreach my $definedPackageVersion ( keys %$definedPackages ) {
                my $definedPackageInfo = $definedPackages->{$definedPackageVersion};

                if( $definedPackageVersion =~ m!^\Q$notInDbName\E(-\d+:)?-([^-]+)-(\d+)$! ) {
                    if( $obsoleteOnly ) {
                        if( $verbose ) {
                            print " # db has: $definedPackageVersion";
                        }
                    } else {
                        push @infoMsg, $definedPackageVersion;
                    }
                    # putting last here seems to create some really strange effects, so let's not do this
                }
            }
            if( @infoMsg ) {
                info( @infoMsg );
            }
            if( $obsoleteOnly ) {
                print "\n";
            }
        }
    }
}

exit $exit;

#####
# Helper method to unpack a tar file with the right command
sub _unpackTar {
    my $packageTarDir = shift;
    my $packageFile   = shift;
    my $tarArgs       = shift;

    my $cmd = "cd '$packageTarDir' && tar ";
    if( $packageFile =~ m!\.xz$! ) {
        $cmd .= 'xfJ';
    } else {
        $cmd .= 'xfz';
    }
    $cmd .= " '$packageFile'";

    if( $tarArgs ) {
        $cmd .= " $tarArgs";
    }
    return UBOS::Utils::myexec( $cmd );
}

#####
# Compare the found and the defined package info
sub compareFoundDefined {
    my $nameVersion = shift;
    my $foundInfo   = shift;
    my $definedInfo = shift;

    foreach my $foundKey ( keys %compareFields ) {
        my $definedKey = $compareFields{$foundKey};

        if( defined( $foundInfo->{$foundKey} )) {
            if( defined( $definedInfo->{$definedKey} )) {
                if( $foundInfo->{$foundKey} ne $definedInfo->{$definedKey} ) {
                    error(  'Package',
                            $nameVersion,
                            'has mismatching',
                            "$foundKey:",
                            $foundInfo->{$foundKey},
                            '(package file meta-data) vs',
                            $definedInfo->{$definedKey},
                            '(package database)' );
                }
            } else {
                info( 'Package', "$nameVersion:", 'expected key', $definedKey, 'in package database, but not found' );
            }
        } else {
            info( 'Package', "$nameVersion:", 'expected key', $foundKey, 'in package metadata, but not found' );
        }
    }
}

#####
# Print synopsis or help
sub synopsisHelpQuit {

    print <<END;
pacsane [--verbose] [--essential] <dbfile>...
    where <dbfile> is the database file of a pacman repository in the local filesystem.
    --verbose:   print more info
    --essential: only compare properties that are essential for the integrity of the
                 package database
pacsane [--verbose] --obsolete-only <dbfile>...
    Print out a list of package files that is obsolete in the repository, e.g. because
    the package is not contained in the package database any more, or a more recent
    version is contained instead.
pacsane --help
    this version of the command
END
    exit 0;
}

1;
