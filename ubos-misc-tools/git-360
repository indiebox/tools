#!/usr/bin/perl
#
# Provides a 360-degree view of the status of one or more git directories
# with respect to other branches and tags
#

use strict;
use warnings;

use Cwd;
use File::Basename;
use Getopt::Long;

my $statusArg;
my $tagsArg;
my $branchesArg;
my $allArg;
my $quietArg;
my @wrtArg = ();

my $parseOk = GetOptions(
        'status'             => \$statusArg,
        'tags'               => \$tagsArg,
        'branches'           => \$branchesArg,
        'all'                => \$allArg,
        'quiet'              => \$quietArg,
        'compare-with-tag=s' => \@wrtArg );

my @dirs = @ARGV;
if(    !$parseOk
    || !@dirs
    || ( $allArg && ( $statusArg || $tagsArg || $branchesArg || $quietArg ))
    || ( @wrtArg && !( $allArg || $tagsArg )))
{
    print STDERR <<END;
Synopsis:
    $0 [--status] [--tags [ --compare-with-tag <tag> ]] [--branches] <dir>...
    $0 --all <dir>...
    $0 --quiet <dir>...
    $0 <dir>...
END
    exit 1;
}

my %wrt = ();
map { $wrt{$_} = $_ } @wrtArg;

if( $allArg ) {
    $statusArg   = 1;
    $tagsArg     = 1;
    $branchesArg = 1;
} elsif( !$statusArg && !$tagsArg && !$branchesArg ) {
    $statusArg = 1;
}

foreach my $d ( @dirs ) {
    if( isGitDir( $d )) {
        my $isImportant = 0;
        my $out = "=== $d ===\n";

        if( $statusArg ) {
            my $msg = `cd $d; git status`;
            if( $msg =~ m!(Your branch is.*commit\.)! ) {
                $out .= "Sync status: ";
                $out .= $1 . "\n";
                $isImportant = 1;
            }

            my @status = split( "\n", `cd $d; git status -s` );
            if( @status ) {
                $out .= "Status:\n";
                $out .= join( '', map { "    $_\n" } @status );
                $isImportant = 1;
            } else {
                $out .= "Status: clean\n";
            }
        }
        
        if( $branchesArg ) {
            my @branches = split( "\n", `cd $d; git branch` );
            $out .= "Branches:\n";
            $out .= join( '', map { "    $_ (" . info( $d, $_, undef )  . ")\n" } @branches );
            $isImportant = 1;
        }

        if( $tagsArg ) {
            my @tags = split( "\n", `cd $d; git tag` );
            if( @tags ) {
                $out .= "Tags:\n";
                $out .= join( '', map { "    $_ (" . info( $d, $_, \%wrt )  . ")\n" } @tags );
            } else {
                $out .= "No tags\n";
            }
            $isImportant = 1;
        }
        $out .= "\n";

        if( $isImportant || !$quietArg ) {
            print $out;
        }
    } else {
        print "WARNING: $d is not a git directory\n";
    }
}

sub isGitDir {
    my $d = shift;

    if( -d "$d/.git" ) {
        return 1;
    }
    $d = Cwd::abs_path( $d );
    if( $d eq '/' ) {
        return 0;
    }
    return isGitDir( dirname( $d ));
}

sub info {
    my $d      = shift;
    my $tag    = shift;
    my $toShow = shift;

    my $ret;
    if( $tag =~ m!\*! ) {
        $ret = "this";
    } elsif( !defined( $toShow ) || defined( $toShow->{$tag} )) {
        $ret = `cd $d; git diff --shortstat $tag`;
        $ret =~ s!^\s+!!;
        $ret =~ s!\s+$!!;
        unless( $ret ) {
            $ret = "same";
        }
    } else {
        $ret = "?";
    }
    return $ret;
}

1;

